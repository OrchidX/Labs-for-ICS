#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
# i in %rcx, limit in %rbp
ncopy:

##################################################################
# You can modify this portion
	# Unr16 header
	xorq %rax,%rax		# count = 0;
	rrmovq %rdx, %rbp
	iaddq $-15, %rbp
	xorq %rcx, %rcx
Test1:	rrmovq %rcx, %r8
	subq %rbp, %r8
	jge Next1		
Unr16:	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r8, %r8	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r9, %r9	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r10, %r10	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r11, %r11
	cmovg %rbx, %rax
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	
	mrmovq 32(%rdi), %r8	# read val from src...
	mrmovq 40(%rdi), %r9
	mrmovq 48(%rdi), %r10
	mrmovq 56(%rdi), %r11
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r8, %r8	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r9, %r9	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r10, %r10	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r11, %r11
	cmovg %rbx, %rax
	rmmovq %r8, 32(%rsi)	# ...and store it to dst
	rmmovq %r9, 40(%rsi)
	rmmovq %r10, 48(%rsi)
	rmmovq %r11, 56(%rsi)
	
	mrmovq 64(%rdi), %r8	# read val from src...
	mrmovq 72(%rdi), %r9
	mrmovq 80(%rdi), %r10
	mrmovq 88(%rdi), %r11
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r8, %r8	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r9, %r9	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r10, %r10	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r11, %r11
	cmovg %rbx, %rax
	rmmovq %r8, 64(%rsi)	# ...and store it to dst
	rmmovq %r9, 72(%rsi)
	rmmovq %r10, 80(%rsi)
	rmmovq %r11, 88(%rsi)
	
	mrmovq 96(%rdi), %r8	# read val from src...
	mrmovq 104(%rdi), %r9
	mrmovq 112(%rdi), %r10
	mrmovq 120(%rdi), %r11
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r8, %r8	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r9, %r9	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r10, %r10	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r11, %r11
	cmovg %rbx, %rax
	rmmovq %r8, 96(%rsi)	# ...and store it to dst
	rmmovq %r9, 104(%rsi)
	rmmovq %r10, 112(%rsi)
	rmmovq %r11, 120(%rsi)
	
	iaddq $128, %rdi
	iaddq $128, %rsi
	iaddq $16, %rcx
	jmp Test1
	
Next1:	iaddq $12, %rbp
Test2:	rrmovq %rcx, %r8
	subq %rbp, %r8
	jge Next2
	
Unr4:	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r8, %r8	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r9, %r9	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r10, %r10	
	cmovg %rbx, %rax
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r11, %r11
	cmovg %rbx, %rax
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	
	iaddq $32, %rdi
	iaddq $32, %rsi
	iaddq $4, %rcx
	jmp Test2

Next2:	rrmovq %rcx, %r8
	subq %rdx, %r8
	jge Done
	mrmovq (%rdi), %r8
	rrmovq %rax, %rbx
	iaddq $1, %rbx
	andq %r8, %r8
	cmovg %rbx, %rax
	rmmovq %r8, (%rsi)
	
	iaddq $8, %rdi
	iaddq $8, %rsi
	iaddq $1, %rcx
	jmp Next2
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
